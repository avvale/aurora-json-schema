{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Aurora Agile Meta Framework",
  "description": "Make agile applications without technical debt",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "description": "Schema version",
      "default": "0.0.1"
    },
    "boundedContextName": {
      "type": "string",
      "description": "The name of the bounded context, singular in kebab-case"
    },
    "moduleName": {
      "type": "string",
      "description": "The name of the module, singular in kebab-case"
    },
    "moduleNames": {
      "type": "string",
      "description": "The name of the module, plural in kebab-case"
    },
    "aggregateName": {
      "type": "string",
      "description": "The name of the aggregateName, singular in PascalCase"
    },
    "hasOAuth": {
      "type": "boolean",
      "description": "Enabled authentication for this module",
      "default": false
    },
    "hasTenant": {
      "type": "boolean",
      "description": "Enabled tenant for this module",
      "default": false
    },
    "hasAuditing": {
      "type": "boolean",
      "description": "Enabled auditing for this module",
      "default": false
    },
    "aggregateProperties": {
      "type": "array",
      "items": {
        "additionalProperties": false,
        "allOf": [{ "$ref": "#/$defs/aggregateProperty" }],
        "properties": {
          "autoIncrement": true,
          "decimals": true,
          "defaultValue": true,
          "enumOptions": true,
          "example": true,
          "index": true,
          "length": true,
          "maxLength": true,
          "name": true,
          "nullable": true,
          "primaryKey": true,
          "type": true,
          "relationship": {
            "type": "object",
            "additionalProperties": false,
            "description": "Relationship definition for this property",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of web component",
                "enum": [
                  "many-to-many",
                  "many-to-one",
                  "none",
                  "one-to-many",
                  "one-to-one"
                ]
              },
              "singularName": {
                "type": "string",
                "description": "Singular name of the property referred to in the relationship, only for one-to-many and many-to-many relationship, example: book"
              },
              "aggregate": {
                "type": "string",
                "description": "Aggregate referring to this relationship, example: LibraryAuthor"
              },
              "modulePath": {
                "type": "string",
                "description": "Path to the module that refers to this relationship, example: library/author"
              },
              "key": {
                "type": "string",
                "description": "Property key that refers to this relationship, only for many-to-one relationship, example: id"
              },
              "field": {
                "type": "string",
                "description": "Field to obtain the relationship data, example: author"
              },
              "avoidConstraint": {
                "type": "boolean",
                "description": "Avoid constraint rules for this relationship"
              },
              "packageName": {
                "type": "string",
                "description": "Path to packageName where is the relationship, example: @aurora-ts/core"
              },
              "isDenormalized": {
                "type": "boolean",
                "description": "Set many-to-many relationship as denormalized, creating a field to store the selected ids"
              },
              "pivot": {
                "type": "object",
                "additionalProperties": false,
                "description": "Relationship pivot table definition for this relationship",
                "properties": {
                  "aggregate": {
                    "type": "string",
                    "description": "AggregateName of Pivot table, example: IamRolesAccounts"
                  },
                  "modulePath": {
                    "type": "string",
                    "description": "Module path where table model file will be saved, example: iam/role"
                  },
                  "fileName": {
                    "type": "string",
                    "description": "Filename of pivot table model file, example: roles-accounts",
                    "example": "roles-accounts"
                  }
                }
              }
            }
          },
          "webComponent": {
            "type": "object",
            "additionalProperties": false,
            "description": "Web Component that wil be rendered for this property",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of web component",
                "enum": [
                  "grid-select-element",
                  "grid-elements-manager",
                  "select"
                ]
              }
            }
          }
        }
      }
    },
    "additionalApis": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/additionalApi"
      }
    }
  },
  "required": [
    "boundedContextName",
    "moduleName",
    "moduleNames",
    "aggregateName"
  ],
  "$defs": {
    "aggregateProperty": {
      "type": "object",
      "required": ["name", "type"],
      "additionalProperties": true,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of property, in camelCase"
        },
        "type": {
          "type": "string",
          "description": "The type of property",
          "enum": [
            "bigint.unsigned",
            "bigint",
            "blob.long",
            "blob.medium",
            "blob.tiny",
            "blob",
            "boolean",
            "char",
            "date",
            "decimal",
            "enum",
            "float",
            "id",
            "int.unsigned",
            "int",
            "json",
            "manyToMany",
            "password",
            "relationship",
            "smallint.unsigned",
            "smallint",
            "text",
            "timestamp",
            "tinyint.unsigned",
            "tinyint",
            "varchar"
          ]
        },
        "length": {
          "type": "number",
          "description": "Set max length to property"
        },
        "maxLength": {
          "type": "number",
          "description": "Set max length to property"
        },
        "nullable": {
          "type": "boolean",
          "description": "Set property to nullable"
        },
        "primaryKey": {
          "type": "boolean",
          "description": "Set property to primary key"
        },
        "index": {
          "type": "string",
          "description": "To define property like a index",
          "enum": ["index", "unique"]
        },
        "enumOptions": {
          "type": "array",
          "description": "Values for enum type",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": ["number", "string", "boolean"],
          "description": "Default value for property"
        },
        "example": {
          "type": ["number", "string", "boolean"],
          "description": "Example value for property, this value will be used in swagger documentation"
        },
        "decimals": {
          "type": "array",
          "description": "Total digits of the number and length of the decimal places in the back of the number, example: [10, 2].",
          "items": {
            "type": "number"
          }
        },
        "autoIncrement": {
          "type": "boolean",
          "description": "Set number property as auto increment"
        }
      }
    },
    "additionalApi": {
      "type": "object",
      "required": ["path", "resolverType", "httpMethod"],
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to access api"
        },
        "resolverType": {
          "type": "string",
          "description": "Type of resolver, query or mutation",
          "enum": ["query", "mutation"]
        },
        "httpMethod": {
          "type": "string",
          "description": "Verb of api rest",
          "enum": ["get", "post", "put", "delete", "patch"]
        }
      }
    }
  }
}
